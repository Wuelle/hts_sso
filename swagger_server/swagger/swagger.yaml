openapi: 3.0.0
info:
  title: HackThisSite Single Sign-On API
  description: "This API should allow users to login, register and manage their HTS\
    \ accounts. It also provides them with a login cookie that is used to authenticate\
    \ them on various HTS apps"
  version: 0.0.1
servers:
- url: /_api/
tags:
- name: Login
  description: Log into an existing account
- name: Registration
  description: Create a new account
- name: Account Recovery
  description: Get access to your account in case you forgot the login credentials
paths:
  /account_recovery/submit_captcha_token:
    post:
      tags:
      - Account Recovery
      operationId: account_recovery_submit_captcha_token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitCaptchaToken'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceToken_1'
      x-openapi-router-controller: swagger_server.controllers.account_recovery_controller
  /account_recovery/request_passphrase_update_token:
    post:
      tags:
      - Account Recovery
      description: "This can be called multiple times in the same session, if the\
        \ user clicks the 'resend mail' link"
      operationId: account_recovery_request_passphrase_reset_token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPassphraseResetToken'
        required: true
      responses:
        "200":
          description: "OK, a mail with the code was sent"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceToken_1'
        "404":
          description: Username not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceToken_1'
      x-openapi-router-controller: swagger_server.controllers.account_recovery_controller
  /account_recovery/submit_passphrase_update_token:
    post:
      tags:
      - Account Recovery
      summary: Send a username reminder mail
      description: Receive a mail containing the usernames associated with a given
        address. Note that the response does *not* reveal whether that email belongs
        to *any* account
      operationId: account_recovery_submit_passphrase_update_token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassphraseUpdateToken'
        required: true
      responses:
        "200":
          description: "If any accounts are associated with that email address, then\
            \ we sent a list of their usernames to it. The user can be prompted to\
            \ answer their secret question (if set). If no secret question is required,\
            \ the response should **not** contain a secret-question field"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceToken_2'
      x-openapi-router-controller: swagger_server.controllers.account_recovery_controller
  /account_recovery/update_passphrase:
    post:
      tags:
      - Account Recovery
      operationId: account_recovery_update_passphrase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassphrase'
        required: true
      responses:
        "200":
          description: "New passphrase is valid and accepted, the user might need\
            \ to complete a captcha to update it"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceToken_3'
        "403":
          description: Invalid verification token or passphrase
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceToken_4'
      x-openapi-router-controller: swagger_server.controllers.account_recovery_controller
  /account_recovery/submit_secret_answer:
    post:
      tags:
      - Account Recovery
      operationId: account_recovery_submit_secret_answer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassphrase_1'
        required: true
      responses:
        "200":
          description: "Correct answer, proceed to set new passphrase"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceToken_4'
        "403":
          description: Invalid secret answer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceToken_4'
      x-openapi-router-controller: swagger_server.controllers.account_recovery_controller
  /account_recovery/request_username_reminder:
    post:
      tags:
      - Account Recovery
      summary: Send a username reminder mail
      description: Receive a mail containing the usernames associated with a given
        address. Note that the response does *not* reveal whether that email belongs
        to *any* account
      operationId: account_recovery_request_username_reminder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUsernameReminder'
        required: true
      responses:
        "200":
          description: "If any accounts are associated with that email address, then\
            \ we sent a list of their usernames to it"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceToken_5'
      x-openapi-router-controller: swagger_server.controllers.account_recovery_controller
  /session/get_nonce_token:
    get:
      tags:
      - Session
      summary: Get a nonce
      description: "Get a one time session token for a specific area of the site (login,\
        \ registration...)"
      operationId: session_get_nonce_token
      parameters:
      - name: area
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: login
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceToken_1'
      x-openapi-router-controller: swagger_server.controllers.session_controller
  /login/init_session:
    post:
      tags:
      - Login
      summary: Start logging in
      description: "Validates the users redirect url and, if it is valid, starts a\
        \ login session on the server. If a username is provided, the client will\
        \ not have to fill out the username frame while logging in (re-authentication)"
      operationId: login_init_session
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitLoginSession'
        required: true
      responses:
        "200":
          description: "OK, the user may start the login process"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitializedSession'
        "403":
          description: The redirect-to parameter was not a valid hackthissite url
            or the given username does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceToken_1'
      x-openapi-router-controller: swagger_server.controllers.login_controller
  /login/submit_frame:
    post:
      tags:
      - Login
      summary: Submit one of multiple credential frames
      description: "This API allows the user to login to their hackthissite.org account.\
        \ Authentication is done in three steps: Username, Password and MFA (if enabled).\
        \ The order in which the user must enter these is unspecified (the client\
        \ is told after submitting the previous value). After each step, the user\
        \ may be required to complete a CAPTCHA."
      operationId: login_submit_frame
      parameters:
      - name: LoginSession
        in: cookie
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_submit_frame_body'
        required: true
      responses:
        "200":
          description: The server is ready to receive the next frame. Authentication
            is not yet complete.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitializedSession_1'
        "201":
          description: The user was successfully authenticated and will be redirected
            to their destination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
        "401":
          description: Invalid session or captcha token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: The client sent either a nonexisting username or an invalid
            password/mfa code. The client may retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "409":
          description: "The frame type expected by the server did not match the one\
            \ sent by the client. As this likely means that something has gone wrong\
            \ on the clients side, the user should be asked to reload the page and\
            \ restart authentication from the beginning. The server will not accept\
            \ further requests for the current login sequence."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
      x-openapi-router-controller: swagger_server.controllers.login_controller
  /register/is_username_available:
    post:
      tags:
      - Registration
      summary: Check if a username is available
      description: If the username is not valid (too long/short etc) the server should
        ignore that and simply respond with 'not available'
      operationId: register_is_username_available
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
        required: true
      responses:
        "200":
          description: Response describing whether the username is available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsUsernameAvailable'
      x-openapi-router-controller: swagger_server.controllers.registration_controller
  /register/start_registration:
    post:
      tags:
      - Registration
      summary: Reserve an account name and link it with an email
      description: "This is the first stage of registration, the user will need to\
        \ verify their email and then set their passphrase/account details"
      operationId: register_start_registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrimaryAccountDetails'
        required: true
      responses:
        "200":
          description: The server sent a verification mail to the provided email address.
            The client must provide the security code from that email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Username or email are not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
      x-openapi-router-controller: swagger_server.controllers.registration_controller
  /register/resend_verification_mail:
    post:
      tags:
      - Registration
      summary: Send another verification mail
      operationId: register_resend_verification_mail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationMail'
        required: true
      responses:
        "200":
          description: Another mail was sent to the same address. The old verification
            code is no longer valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: No new mail was sent. Username/email did not match any account
            currently being registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
      x-openapi-router-controller: swagger_server.controllers.registration_controller
  /register/change_verification_email:
    post:
      tags:
      - Registration
      summary: Change the email linked with an account that is currently being registered.
      description: "This exists in case the user mistyped their email. The user must\
        \ be able to provide the email that was previously used as well as the username\
        \ that should be registered. If the address was successfully changed, a new\
        \ verification mail should be sent."
      operationId: register_change_verification_mail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeVericationMailAddress'
        required: true
      responses:
        "200":
          description: Account mail was changed and a new verification mail was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Account email was not changed. Possible reasons include username/old
            email not matching or no account with the given username currently being
            registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
      x-openapi-router-controller: swagger_server.controllers.registration_controller
  /register/verify_email_address:
    post:
      tags:
      - Registration
      summary: Verify a users account email
      operationId: register_verify_email_address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerificationToken'
        required: true
      responses:
        "200":
          description: Email was successfully verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "403":
          description: Invalid verification code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidVerificationCode'
      x-openapi-router-controller: swagger_server.controllers.registration_controller
  /register/finish_registration:
    post:
      tags:
      - Registration
      summary: Complete a users account
      description: Allows the user to set their password/secret question to complete
        their account setup
      operationId: register_finish_registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinishRegistration'
        required: true
      responses:
        "201":
          description: The account was successfully created. The user receives a authentication
            cookie and will be redirected to some landing page.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
      x-openapi-router-controller: swagger_server.controllers.registration_controller
components:
  schemas:
    NonceToken:
      type: string
      example: <token>
    NextFrame:
      required:
      - next
      - show-captcha
      type: object
      properties:
        next:
          type: string
          description: The next frame that should be shown to the user
          enum:
          - username
          - password
          - mfa
        show-captcha:
          type: boolean
          description: Whether or not the user must complete a captcha to continue
            authentication
      description: Information about the next login frame shown to the user
      example:
        next: password
        show-captcha: false
    CaptchaPrompt:
      required:
      - show-captcha
      type: object
      properties:
        show-captcha:
          type: boolean
          description: Whether or not the user must complete a captcha to continue
            authentication
      description: Tells the client whether or not the server expects it to complete
        a captcha with the next frame
    SuccessfulAuthentication:
      required:
      - redirect
      - token
      type: object
      properties:
        redirect:
          type: string
          description: The client should visit this domain next
          example: forums.hackthissite.org
        token:
          type: string
          description: A cookie that will prove account ownership to HTS apps
          example: HackThisSite=<token>;path=/;domain=hackthissite.org
      description: Provides the client with an authentication cookie and a redirection
        url after completing login
      example:
        redirect: forums.hackthissite.org
        token: HackThisSite=<token>;path=/;domain=hackthissite.org
    account_recoverysubmit_captcha_token_content:
      required:
      - h-captcha-token
      type: object
      properties:
        h-captcha-token:
          type: string
    SubmitCaptchaToken:
      title: SubmitCaptchaToken
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/account_recoverysubmit_captcha_token_content'
    NonceToken_1:
      title: NonceToken
      properties:
        nonce:
          type: string
      example:
        nonce: nonce
    account_recoveryrequest_passphrase_update_token_content:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          example: Alaska
    RequestPassphraseResetToken:
      title: RequestPassphraseResetToken
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/account_recoveryrequest_passphrase_update_token_content'
    account_recoverysubmit_passphrase_update_token_content:
      required:
      - token
      type: object
      properties:
        token:
          type: string
    PassphraseUpdateToken:
      title: PassphraseUpdateToken
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/account_recoverysubmit_passphrase_update_token_content'
    NonceToken_2:
      title: NonceToken
      required:
      - content
      - nonce
      properties:
        nonce:
          type: string
        content:
          $ref: '#/components/schemas/NonceToken_2_content'
      example:
        nonce: nonce
        content:
          secret-question: secret-question
    account_recoveryupdate_passphrase_content:
      required:
      - new-passphrase
      - update-token
      type: object
      properties:
        update-token:
          type: string
          example: <reset token>
        new-passphrase:
          type: string
    UpdatePassphrase:
      title: UpdatePassphrase
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/account_recoveryupdate_passphrase_content'
    NonceToken_3:
      title: NonceToken
      required:
      - nonce
      properties:
        nonce:
          type: string
        content:
          $ref: '#/components/schemas/NonceToken_3_content'
      example:
        nonce: nonce
        content:
          captcha-required: true
    NonceToken_4:
      title: NonceToken
      required:
      - nonce
      properties:
        nonce:
          type: string
      example:
        nonce: nonce
    account_recoverysubmit_secret_answer_content:
      required:
      - secret-answer
      type: object
      properties:
        secret-answer:
          type: string
    UpdatePassphrase_1:
      title: UpdatePassphrase
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/account_recoverysubmit_secret_answer_content'
    account_recoveryrequest_username_reminder_content:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          example: user@example.com
    RequestUsernameReminder:
      title: RequestUsernameReminder
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/account_recoveryrequest_username_reminder_content'
    NonceToken_5:
      title: NonceToken
      required:
      - content
      - nonce
      properties:
        nonce:
          type: string
        content:
          $ref: '#/components/schemas/NonceToken_3_content'
      example:
        nonce: nonce
        content:
          captcha-required: true
    logininit_session_content:
      required:
      - redirect
      type: object
      properties:
        redirect:
          type: string
          description: "The AES-encrypted domain that the client will be redirected\
            \ to after authentication completes. If this is not a valid url belonging\
            \ to hackthissite.org, the server must not open a session."
        username:
          type: string
          description: The account name that should be reauthenticated
          example: Alaska
    InitLoginSession:
      title: InitLoginSession
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/logininit_session_content'
      description: The initial payload sent by the client which starts a login session
        on the server
    InitializedSession:
      title: InitializedSession
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/NextFrame'
      example:
        nonce: <token>
        content:
          next: password
          show-captcha: false
    loginsubmit_frame_content:
      required:
      - frame
      - value
      type: object
      properties:
        frame:
          type: string
          description: The frame that was submitted by the user
          example: password
          enum:
          - username
          - password
          - mfa
        value:
          type: string
          description: The value submitted by the user
          example: my-very-secure-password123
        h-captcha-response:
          type: string
          description: A token proving the user has completed the hcaptcha challenge.
            Only required if the user was prompted to complete a captcha before
          example: <challenge token>
    login_submit_frame_body:
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/loginsubmit_frame_content'
    InitializedSession_1:
      title: InitializedSession
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/NextFrame'
      example:
        nonce: <token>
        content:
          next: password
          show-captcha: false
    inline_response_201:
      required:
      - content
      - nonce
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/SuccessfulAuthentication'
      example:
        nonce: <token>
        content:
          redirect: forums.hackthissite.org
          token: HackThisSite=<token>;path=/;domain=hackthissite.org
    inline_response_401:
      required:
      - nonce
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
      example:
        nonce: <token>
    inline_response_403:
      required:
      - content
      - nonce
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/CaptchaPrompt'
    registeris_username_available_content:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          description: An account name
          example: Alaska
    Username:
      title: Username
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/registeris_username_available_content'
    IsUsernameAvailable:
      title: IsUsernameAvailable
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/IsUsernameAvailable_content'
      example:
        nonce: <token>
        content:
          is-available: true
    registerstart_registration_content:
      required:
      - email
      - username
      type: object
      properties:
        username:
          type: string
          example: Alaska
        email:
          type: string
          example: user@example.com
    PrimaryAccountDetails:
      title: PrimaryAccountDetails
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/registerstart_registration_content'
    ResendVerificationMail:
      title: ResendVerificationMail
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/account_recoveryrequest_username_reminder_content'
    registerchange_verification_email_content:
      required:
      - new-email
      - old-email
      type: object
      properties:
        old-email:
          type: string
          example: old@example.com
        new-email:
          type: string
          example: new@example.com
    ChangeVericationMailAddress:
      title: ChangeVericationMailAddress
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/registerchange_verification_email_content'
    registerverify_email_address_content:
      required:
      - verification-code
      type: object
      properties:
        verification-code:
          type: string
          description: A secret code used to prove ownership of an email address
          example: <verification code>
    EmailVerificationToken:
      title: EmailVerificationToken
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/registerverify_email_address_content'
    inline_response_200:
      required:
      - nonce
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/inline_response_200_content'
      example:
        nonce: <token>
        content:
          captcha-required: true
    InvalidVerificationCode:
      title: InvalidVerificationCode
      required:
      - nonce
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
    registerfinish_registration_content:
      required:
      - password
      type: object
      properties:
        h-captcha-response:
          type: string
          description: A token proving the user has completed the hcaptcha challenge.
            Only required if the user was prompted to complete a captcha before
          example: <challenge token>
        password:
          type: string
          description: The account password
          example: my-very-secure-password123
        secret-question:
          type: string
          description: A question which the user can answer to recover the account
            in case they ever forget their password or lose their MFA device
          example: What is the last name of the teacher who gave me my first failing
            grade?
        secret-answer:
          type: string
          description: The answer to the secret question.
          example: Schmidt
    FinishRegistration:
      title: FinishRegistration
      required:
      - content
      - nonce
      type: object
      properties:
        nonce:
          $ref: '#/components/schemas/NonceToken'
        content:
          $ref: '#/components/schemas/registerfinish_registration_content'
    NonceToken_2_content:
      type: object
      properties:
        secret-question:
          type: string
      example:
        secret-question: secret-question
    NonceToken_3_content:
      required:
      - captcha-required
      type: object
      properties:
        captcha-required:
          type: boolean
      example:
        captcha-required: true
    IsUsernameAvailable_content:
      required:
      - is-available
      type: object
      properties:
        is-available:
          type: boolean
      example:
        is-available: true
    inline_response_200_content:
      type: object
      properties:
        captcha-required:
          type: boolean
      example:
        captcha-required: true

