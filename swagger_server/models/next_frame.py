# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class NextFrame(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, next: str=None, show_captcha: bool=None):  # noqa: E501
        """NextFrame - a model defined in Swagger

        :param next: The next of this NextFrame.  # noqa: E501
        :type next: str
        :param show_captcha: The show_captcha of this NextFrame.  # noqa: E501
        :type show_captcha: bool
        """
        self.swagger_types = {
            'next': str,
            'show_captcha': bool
        }

        self.attribute_map = {
            'next': 'next',
            'show_captcha': 'show-captcha'
        }
        self._next = next
        self._show_captcha = show_captcha

    @classmethod
    def from_dict(cls, dikt) -> 'NextFrame':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NextFrame of this NextFrame.  # noqa: E501
        :rtype: NextFrame
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next(self) -> str:
        """Gets the next of this NextFrame.

        The next frame that should be shown to the user  # noqa: E501

        :return: The next of this NextFrame.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next: str):
        """Sets the next of this NextFrame.

        The next frame that should be shown to the user  # noqa: E501

        :param next: The next of this NextFrame.
        :type next: str
        """
        allowed_values = ["username", "password", "mfa"]  # noqa: E501
        if next not in allowed_values:
            raise ValueError(
                "Invalid value for `next` ({0}), must be one of {1}"
                .format(next, allowed_values)
            )

        self._next = next

    @property
    def show_captcha(self) -> bool:
        """Gets the show_captcha of this NextFrame.

        Whether or not the user must complete a captcha to continue authentication  # noqa: E501

        :return: The show_captcha of this NextFrame.
        :rtype: bool
        """
        return self._show_captcha

    @show_captcha.setter
    def show_captcha(self, show_captcha: bool):
        """Sets the show_captcha of this NextFrame.

        Whether or not the user must complete a captcha to continue authentication  # noqa: E501

        :param show_captcha: The show_captcha of this NextFrame.
        :type show_captcha: bool
        """
        if show_captcha is None:
            raise ValueError("Invalid value for `show_captcha`, must not be `None`")  # noqa: E501

        self._show_captcha = show_captcha
