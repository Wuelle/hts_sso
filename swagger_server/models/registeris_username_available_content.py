# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RegisterisUsernameAvailableContent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, username: str=None):  # noqa: E501
        """RegisterisUsernameAvailableContent - a model defined in Swagger

        :param username: The username of this RegisterisUsernameAvailableContent.  # noqa: E501
        :type username: str
        """
        self.swagger_types = {
            'username': str
        }

        self.attribute_map = {
            'username': 'username'
        }
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'RegisterisUsernameAvailableContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The registeris_username_available_content of this RegisterisUsernameAvailableContent.  # noqa: E501
        :rtype: RegisterisUsernameAvailableContent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this RegisterisUsernameAvailableContent.

        An account name  # noqa: E501

        :return: The username of this RegisterisUsernameAvailableContent.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this RegisterisUsernameAvailableContent.

        An account name  # noqa: E501

        :param username: The username of this RegisterisUsernameAvailableContent.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username
