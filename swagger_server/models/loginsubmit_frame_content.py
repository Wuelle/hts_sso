# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.login_frame import LoginFrame  # noqa: F401,E501
from swagger_server import util


class LoginsubmitFrameContent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, frame: LoginFrame=None, value: str=None, h_captcha_response: str=None):  # noqa: E501
        """LoginsubmitFrameContent - a model defined in Swagger

        :param frame: The frame of this LoginsubmitFrameContent.  # noqa: E501
        :type frame: LoginFrame
        :param value: The value of this LoginsubmitFrameContent.  # noqa: E501
        :type value: str
        :param h_captcha_response: The h_captcha_response of this LoginsubmitFrameContent.  # noqa: E501
        :type h_captcha_response: str
        """
        self.swagger_types = {
            'frame': LoginFrame,
            'value': str,
            'h_captcha_response': str
        }

        self.attribute_map = {
            'frame': 'frame',
            'value': 'value',
            'h_captcha_response': 'h-captcha-response'
        }
        self._frame = frame
        self._value = value
        self._h_captcha_response = h_captcha_response

    @classmethod
    def from_dict(cls, dikt) -> 'LoginsubmitFrameContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The loginsubmit_frame_content of this LoginsubmitFrameContent.  # noqa: E501
        :rtype: LoginsubmitFrameContent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frame(self) -> LoginFrame:
        """Gets the frame of this LoginsubmitFrameContent.


        :return: The frame of this LoginsubmitFrameContent.
        :rtype: LoginFrame
        """
        return self._frame

    @frame.setter
    def frame(self, frame: LoginFrame):
        """Sets the frame of this LoginsubmitFrameContent.


        :param frame: The frame of this LoginsubmitFrameContent.
        :type frame: LoginFrame
        """
        if frame is None:
            raise ValueError("Invalid value for `frame`, must not be `None`")  # noqa: E501

        self._frame = frame

    @property
    def value(self) -> str:
        """Gets the value of this LoginsubmitFrameContent.

        The value submitted by the user  # noqa: E501

        :return: The value of this LoginsubmitFrameContent.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this LoginsubmitFrameContent.

        The value submitted by the user  # noqa: E501

        :param value: The value of this LoginsubmitFrameContent.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def h_captcha_response(self) -> str:
        """Gets the h_captcha_response of this LoginsubmitFrameContent.

        A token proving the user has completed the hcaptcha challenge. Only required if the user was prompted to complete a captcha before  # noqa: E501

        :return: The h_captcha_response of this LoginsubmitFrameContent.
        :rtype: str
        """
        return self._h_captcha_response

    @h_captcha_response.setter
    def h_captcha_response(self, h_captcha_response: str):
        """Sets the h_captcha_response of this LoginsubmitFrameContent.

        A token proving the user has completed the hcaptcha challenge. Only required if the user was prompted to complete a captcha before  # noqa: E501

        :param h_captcha_response: The h_captcha_response of this LoginsubmitFrameContent.
        :type h_captcha_response: str
        """

        self._h_captcha_response = h_captcha_response
