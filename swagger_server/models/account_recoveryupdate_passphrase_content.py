# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AccountRecoveryupdatePassphraseContent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, update_token: str=None, new_passphrase: str=None):  # noqa: E501
        """AccountRecoveryupdatePassphraseContent - a model defined in Swagger

        :param update_token: The update_token of this AccountRecoveryupdatePassphraseContent.  # noqa: E501
        :type update_token: str
        :param new_passphrase: The new_passphrase of this AccountRecoveryupdatePassphraseContent.  # noqa: E501
        :type new_passphrase: str
        """
        self.swagger_types = {
            'update_token': str,
            'new_passphrase': str
        }

        self.attribute_map = {
            'update_token': 'update-token',
            'new_passphrase': 'new-passphrase'
        }
        self._update_token = update_token
        self._new_passphrase = new_passphrase

    @classmethod
    def from_dict(cls, dikt) -> 'AccountRecoveryupdatePassphraseContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The account_recoveryupdate_passphrase_content of this AccountRecoveryupdatePassphraseContent.  # noqa: E501
        :rtype: AccountRecoveryupdatePassphraseContent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def update_token(self) -> str:
        """Gets the update_token of this AccountRecoveryupdatePassphraseContent.


        :return: The update_token of this AccountRecoveryupdatePassphraseContent.
        :rtype: str
        """
        return self._update_token

    @update_token.setter
    def update_token(self, update_token: str):
        """Sets the update_token of this AccountRecoveryupdatePassphraseContent.


        :param update_token: The update_token of this AccountRecoveryupdatePassphraseContent.
        :type update_token: str
        """
        if update_token is None:
            raise ValueError("Invalid value for `update_token`, must not be `None`")  # noqa: E501

        self._update_token = update_token

    @property
    def new_passphrase(self) -> str:
        """Gets the new_passphrase of this AccountRecoveryupdatePassphraseContent.


        :return: The new_passphrase of this AccountRecoveryupdatePassphraseContent.
        :rtype: str
        """
        return self._new_passphrase

    @new_passphrase.setter
    def new_passphrase(self, new_passphrase: str):
        """Sets the new_passphrase of this AccountRecoveryupdatePassphraseContent.


        :param new_passphrase: The new_passphrase of this AccountRecoveryupdatePassphraseContent.
        :type new_passphrase: str
        """
        if new_passphrase is None:
            raise ValueError("Invalid value for `new_passphrase`, must not be `None`")  # noqa: E501

        self._new_passphrase = new_passphrase
