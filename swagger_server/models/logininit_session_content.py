# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LogininitSessionContent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, redirect: str=None, username: str=None):  # noqa: E501
        """LogininitSessionContent - a model defined in Swagger

        :param redirect: The redirect of this LogininitSessionContent.  # noqa: E501
        :type redirect: str
        :param username: The username of this LogininitSessionContent.  # noqa: E501
        :type username: str
        """
        self.swagger_types = {
            'redirect': str,
            'username': str
        }

        self.attribute_map = {
            'redirect': 'redirect',
            'username': 'username'
        }
        self._redirect = redirect
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'LogininitSessionContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The logininit_session_content of this LogininitSessionContent.  # noqa: E501
        :rtype: LogininitSessionContent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def redirect(self) -> str:
        """Gets the redirect of this LogininitSessionContent.

        The AES-encrypted domain that the client will be redirected to after authentication completes. If this is not a valid url belonging to hackthissite.org, the server must not open a session.  # noqa: E501

        :return: The redirect of this LogininitSessionContent.
        :rtype: str
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect: str):
        """Sets the redirect of this LogininitSessionContent.

        The AES-encrypted domain that the client will be redirected to after authentication completes. If this is not a valid url belonging to hackthissite.org, the server must not open a session.  # noqa: E501

        :param redirect: The redirect of this LogininitSessionContent.
        :type redirect: str
        """
        if redirect is None:
            raise ValueError("Invalid value for `redirect`, must not be `None`")  # noqa: E501

        self._redirect = redirect

    @property
    def username(self) -> str:
        """Gets the username of this LogininitSessionContent.

        The account name that should be reauthenticated  # noqa: E501

        :return: The username of this LogininitSessionContent.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this LogininitSessionContent.

        The account name that should be reauthenticated  # noqa: E501

        :param username: The username of this LogininitSessionContent.
        :type username: str
        """

        self._username = username
