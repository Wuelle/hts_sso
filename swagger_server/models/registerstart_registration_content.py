# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RegisterstartRegistrationContent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, h_captcha_response: str=None, username: str=None, email: str=None):  # noqa: E501
        """RegisterstartRegistrationContent - a model defined in Swagger

        :param h_captcha_response: The h_captcha_response of this RegisterstartRegistrationContent.  # noqa: E501
        :type h_captcha_response: str
        :param username: The username of this RegisterstartRegistrationContent.  # noqa: E501
        :type username: str
        :param email: The email of this RegisterstartRegistrationContent.  # noqa: E501
        :type email: str
        """
        self.swagger_types = {
            'h_captcha_response': str,
            'username': str,
            'email': str
        }

        self.attribute_map = {
            'h_captcha_response': 'h-captcha-response',
            'username': 'username',
            'email': 'email'
        }
        self._h_captcha_response = h_captcha_response
        self._username = username
        self._email = email

    @classmethod
    def from_dict(cls, dikt) -> 'RegisterstartRegistrationContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The registerstart_registration_content of this RegisterstartRegistrationContent.  # noqa: E501
        :rtype: RegisterstartRegistrationContent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def h_captcha_response(self) -> str:
        """Gets the h_captcha_response of this RegisterstartRegistrationContent.

        A token proving the user has completed the hcaptcha challenge. Only required if the user was prompted to complete a captcha before  # noqa: E501

        :return: The h_captcha_response of this RegisterstartRegistrationContent.
        :rtype: str
        """
        return self._h_captcha_response

    @h_captcha_response.setter
    def h_captcha_response(self, h_captcha_response: str):
        """Sets the h_captcha_response of this RegisterstartRegistrationContent.

        A token proving the user has completed the hcaptcha challenge. Only required if the user was prompted to complete a captcha before  # noqa: E501

        :param h_captcha_response: The h_captcha_response of this RegisterstartRegistrationContent.
        :type h_captcha_response: str
        """

        self._h_captcha_response = h_captcha_response

    @property
    def username(self) -> str:
        """Gets the username of this RegisterstartRegistrationContent.


        :return: The username of this RegisterstartRegistrationContent.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this RegisterstartRegistrationContent.


        :param username: The username of this RegisterstartRegistrationContent.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this RegisterstartRegistrationContent.


        :return: The email of this RegisterstartRegistrationContent.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this RegisterstartRegistrationContent.


        :param email: The email of this RegisterstartRegistrationContent.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email
