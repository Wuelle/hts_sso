# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_info import AccountInfo  # noqa: F401,E501
from swagger_server.models.privacy_settings import PrivacySettings  # noqa: F401,E501
from swagger_server.models.route_category import RouteCategory  # noqa: F401,E501
from swagger_server import util


class DashboardInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, allowed_routes: List[RouteCategory]=None, account_info: AccountInfo=None, privacy_settings: PrivacySettings=None):  # noqa: E501
        """DashboardInfo - a model defined in Swagger

        :param allowed_routes: The allowed_routes of this DashboardInfo.  # noqa: E501
        :type allowed_routes: List[RouteCategory]
        :param account_info: The account_info of this DashboardInfo.  # noqa: E501
        :type account_info: AccountInfo
        :param privacy_settings: The privacy_settings of this DashboardInfo.  # noqa: E501
        :type privacy_settings: PrivacySettings
        """
        self.swagger_types = {
            'allowed_routes': List[RouteCategory],
            'account_info': AccountInfo,
            'privacy_settings': PrivacySettings
        }

        self.attribute_map = {
            'allowed_routes': 'allowed-routes',
            'account_info': 'account-info',
            'privacy_settings': 'privacy-settings'
        }
        self._allowed_routes = allowed_routes
        self._account_info = account_info
        self._privacy_settings = privacy_settings

    @classmethod
    def from_dict(cls, dikt) -> 'DashboardInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DashboardInfo of this DashboardInfo.  # noqa: E501
        :rtype: DashboardInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_routes(self) -> List[RouteCategory]:
        """Gets the allowed_routes of this DashboardInfo.

        Routes on the dashboard that can be viewed by the user. These routes may be disabled (for example, if the user is required to change their password before they can edit their account)  # noqa: E501

        :return: The allowed_routes of this DashboardInfo.
        :rtype: List[RouteCategory]
        """
        return self._allowed_routes

    @allowed_routes.setter
    def allowed_routes(self, allowed_routes: List[RouteCategory]):
        """Sets the allowed_routes of this DashboardInfo.

        Routes on the dashboard that can be viewed by the user. These routes may be disabled (for example, if the user is required to change their password before they can edit their account)  # noqa: E501

        :param allowed_routes: The allowed_routes of this DashboardInfo.
        :type allowed_routes: List[RouteCategory]
        """
        if allowed_routes is None:
            raise ValueError("Invalid value for `allowed_routes`, must not be `None`")  # noqa: E501

        self._allowed_routes = allowed_routes

    @property
    def account_info(self) -> AccountInfo:
        """Gets the account_info of this DashboardInfo.


        :return: The account_info of this DashboardInfo.
        :rtype: AccountInfo
        """
        return self._account_info

    @account_info.setter
    def account_info(self, account_info: AccountInfo):
        """Sets the account_info of this DashboardInfo.


        :param account_info: The account_info of this DashboardInfo.
        :type account_info: AccountInfo
        """
        if account_info is None:
            raise ValueError("Invalid value for `account_info`, must not be `None`")  # noqa: E501

        self._account_info = account_info

    @property
    def privacy_settings(self) -> PrivacySettings:
        """Gets the privacy_settings of this DashboardInfo.


        :return: The privacy_settings of this DashboardInfo.
        :rtype: PrivacySettings
        """
        return self._privacy_settings

    @privacy_settings.setter
    def privacy_settings(self, privacy_settings: PrivacySettings):
        """Sets the privacy_settings of this DashboardInfo.


        :param privacy_settings: The privacy_settings of this DashboardInfo.
        :type privacy_settings: PrivacySettings
        """
        if privacy_settings is None:
            raise ValueError("Invalid value for `privacy_settings`, must not be `None`")  # noqa: E501

        self._privacy_settings = privacy_settings
