openapi: 3.0.0
info:
  title: HackThisSite Single Sign-On API
  description: "This API should allow users to login, register and manage their HTS accounts. It also provides them with a login cookie that is used to authenticate them on various HTS apps"
  version: 0.0.1
servers:
  - url: /_api/
tags:
  - name: Login
    description: "Log into an existing account"
  - name: Registration
    description: "Create a new account"
  - name: Dashboard
    description: "General account management"
  - name: Account Recovery
    description: "Get access to your account in case you forgot the login credentials"
paths:
  /dashboard/get_user_info:
    post:
      tags:
        - Dashboard
      operationId: dashboard.get_user_info
      summary: Get a users account data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    account-token:
                      type: string
              required: 
                - nonce
                - content
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                title: "DashboardInfoContainer"
                type: object
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                  content:
                    title: "DashboardInfo"
                    description: "Information required to display the user dashboard"
                    type: object
                    properties:
                      allowed-routes:
                        type: array
                        title: "AllowedRoutes"
                        description: "Routes on the dashboard that can be viewed by the user. These routes may be disabled (for example, if the user is required to change their password before they can edit their account)"
                        items:
                          type: object
                          title: "RouteCategory"
                          properties:
                            name:
                              type: string
                              example: "General"
                            children:
                              type: array
                              items:
                                type: object
                                description: "A single route on the dashboard. May be disabled if the user can *see* but not *use* the route"
                                properties:
                                  name: 
                                    type: string
                                    example: "General"
                                  disabled:
                                    type: boolean
                                required:
                                  - name
                                  - disabled
                      account-info:
                        title: "AccountInfo"
                        description: "Public information about a specific account"
                        type: object
                        properties:
                          account-name:
                            type: string
                            example: "Wuelle"
                          display-name:
                            type: string
                            example: "Alaska"
                          email:
                            type: string
                            example: "foo@example.com"
                          avatar-url:
                            type: string
                            example: "https://www.hackthissite.org/pages/user/avatar.view.php?id=standard/terrora.jpg"
                          about-me:
                            type: string
                          linked-accounts:
                            type: object
                            title: "LinkedAccounts"
                            description: "Lists third party accounts that have been linked with this HTS account"
                            properties:
                              discord:
                                $ref: "#/components/schemas/LinkedAccount"
                              github:
                                $ref: "#/components/schemas/LinkedAccount"
                              gitlab:
                                $ref: "#/components/schemas/LinkedAccount"
                      privacy-settings:
                        title: "PrivacySettings"
                        type: object
                        properties:
                          email:
                            $ref: "#/components/schemas/PrivacySetting"
                          irc-nicks:
                            $ref: "#/components/schemas/PrivacySetting"
                          linked-discord-accounts:
                            $ref: "#/components/schemas/PrivacySetting"
                    required:
                      - allowed-routes
                      - account-info
                      - privacy-settings
                        
  /account_recovery/submit_captcha_token:
    post:
      tags:
        - Account Recovery
      operationId: account_recovery.submit_captcha_token
      summary: "Prove that the user completed a captcha"
      description: "After several operations, the user may need to complete a captcha before their changes are actually applied on the server. (like resetting their passphrase). "
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "SubmitCaptchaToken"
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    h-captcha-token:
                      type: string
                  required:
                    - h-captcha-token
              required:
                - nonce
                - content
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                title: "NonceToken"
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
  /account_recovery/request_passphrase_update_token:
    post:
      tags:
        - Account Recovery
      operationId: account_recovery.request_passphrase_reset_token
      description: "This can be called multiple times in the same session, if the user clicks the 'resend mail' link"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "RequestPassphraseResetToken"
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    username:
                      type: string
                      example: "Alaska"
                  required:
                    - username
              required:
                - nonce
                - content
      responses:
        "200":
          description: "OK, a mail with the code was sent"
          content:
            application/json:
              schema:
                title: "NonceToken"
                properties:
                  nonce:
                    type: string
        "404":
          description: "Username not found"
          content:
            application/json:
              schema:
                title: "NonceToken"
                properties:
                  nonce:
                    type: string
  /account_recovery/submit_passphrase_update_token:
    post:
      tags:
        - Account Recovery
      operationId: account_recovery.submit_passphrase_update_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "PassphraseUpdateToken"
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    token:
                      type: string
                  required:
                    - token
              required:
                - nonce
                - content
      responses:
        "200":
          description: "The passphrase update token is valid - user may need to answer their secret question (if set) before updating their passphrase"
          content:
            application/json:
              schema:
                title: "NonceToken"
                properties:
                  nonce:
                    type: string
                  content:
                    type: object
                    properties:
                      secret-question:
                        type: string
                required:
                  - nonce
                  - content
        "403":
          description: "Invalid update token"
          content:
            application/json:
              schema:
                title: "NonceToken"
                properties:
                  nonce:
                    type: string
                required:
                  - nonce
  /account_recovery/update_passphrase:
    post:
      tags:
        - Account Recovery
      operationId: account_recovery.update_passphrase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "UpdatePassphrase"
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    new-passphrase:
                      type: string
                  required:
                    - new-passphrase
              required:
                - nonce
                - content
      responses:
        "200":
          description: "New passphrase is valid and accepted, the user might need to complete a captcha to update it"
          content:
            application/json:
              schema:
                title: "NonceToken"
                properties:
                  nonce:
                    type: string
                  content:
                    type: object
                    properties:
                      captcha-required:
                        type: boolean
                    required:
                      - captcha-required
                required:
                  - nonce
        "403":
          description: "Invalid verification token or passphrase"
          content:
            application/json:
              schema:
                title: "NonceToken"
                properties:
                  nonce:
                    type: string
                required:
                  - nonce
  /account_recovery/submit_secret_answer:
    post:
      tags:
        - Account Recovery
      operationId: account_recovery.submit_secret_answer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "UpdatePassphrase"
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    secret-answer:
                      type: string
                  required:
                    - secret-answer
              required:
                - nonce
                - content
      responses:
        "200":
          description: "Correct answer, proceed to set new passphrase"
          content:
            application/json:
              schema:
                title: "NonceToken"
                properties:
                  nonce:
                    type: string
                required:
                  - nonce
        "403":
          description: "Invalid secret answer"
          content:
            application/json:
              schema:
                title: "NonceToken"
                properties:
                  nonce:
                    type: string
                required:
                  - nonce
  /account_recovery/request_username_reminder:
    post:
      tags:
        - Account Recovery
      operationId: account_recovery.request_username_reminder
      summary: "Send a username reminder mail"
      description: "Receive a mail containing the usernames associated with a given address. Note that the response does *not* reveal whether that email belongs to *any* account"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "RequestUsernameReminder"
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    email:
                      type: string
                      example: "user@example.com"
                  required:
                    - email
              required:
                - nonce
                - content
      responses:
        "200":
          description: "If any accounts are associated with that email address, then we sent a list of their usernames to it"
          content:
            application/json:
              schema:
                title: "NonceToken"
                properties:
                  nonce:
                    type: string
                  content:
                    type: object
                    properties:
                      captcha-required:
                        type: boolean
                    required:
                      - captcha-required
                required:
                  - nonce
                  - content
  
  /session/get_nonce_token:
    get:
      tags:
        - Session
      summary: Get a nonce
      description: "Get a one time session token for a specific area of the site (login, registration...)"
      operationId: session.get_nonce_token
      parameters:
        - in: query
          name: area
          schema:
            type: string
          example: "login"

      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                title: "NonceToken"
                properties:
                  nonce:
                    type: string
  /login/init_session:
    post:
      tags:
        - Login
      summary:
        Start logging in
      description: "Validates the users redirect url and, if it is valid, starts a login session on the server. If a username is provided, the client will not have to fill out the username frame while logging in (re-authentication)"
      operationId: login.init_session
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              title: "InitLoginSession"
              description: "The initial payload sent by the client which starts a login session on the server"
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    redirect:
                      type: string
                      description: "The AES-encrypted domain that the client will be redirected to after authentication completes. If this is not a valid url belonging to hackthissite.org, the server must not open a session."
                    username:
                      type: string
                      description: "The account name that should be reauthenticated"
                      example: "Alaska"
                  required:
                    - redirect
              required:
                - nonce
                - content          
      responses:
        "200":
          description: "OK, the user may start the login process"
          content:
            application/json:
              schema:
                title: "InitializedSession"
                type: object
                properties:
                  nonce: 
                    $ref: "#/components/schemas/NonceToken"
                  content:
                    type: object
                    properties:
                      first-frame: 
                        $ref: "#/components/schemas/LoginFrame"
                    required:
                      - first-frame
        "403":
          description: "The redirect-to parameter was not a valid hackthissite url or the given username does not exist."
          content:
            application/json:
              schema:
                title: "NonceToken"
                properties:
                  nonce:
                    type: string
  /login/submit_frame:
    post:
      tags:
        - Login
      summary: Submit one of multiple credential frames
      description: "This API allows the user to login to their hackthissite.org account. Authentication is done in three steps: Username, Password and MFA (if enabled). The order in which the user must enter these is unspecified (the client is told after submitting the previous value). After each step, the user may be required to complete a CAPTCHA."
      operationId: login.submit_frame
      parameters:
        - name: LoginSession
          in: cookie
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  required:
                    - frame
                    - value
                  properties:
                    frame:
                      $ref: "#/components/schemas/LoginFrame"
                    value:
                      description: "The value submitted by the user"
                      type: string
                      example: "my-very-secure-password123"
                    h-captcha-response:
                      description: "A token proving the user has completed the hcaptcha challenge. Only required if the user was prompted to complete a captcha before"
                      type: string
                      example: "<challenge token>"
      responses:
        "200":
          description: "The server is ready to receive the next frame. Authentication is not yet complete."
          content:
            application/json:
              schema:
                title: "InitializedSession"
                type: object
                properties:
                  nonce: 
                    $ref: "#/components/schemas/NonceToken"
                  content:
                    type: object
                    properties:
                      next:
                        $ref: "#/components/schemas/LoginFrame"
                    required:
                      - next
                required:
                  - nonce
                  - content
          
        "201":
          description: "The user was successfully authenticated and will be redirected to their destination"
          content:
            application/json:
              schema:
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                  content:
                    $ref: "#/components/schemas/SuccessfulAuthentication"
                required:
                  - nonce
                  - content
              
        "401":
          description: "Invalid session or captcha token"
          content:
            application/json:
              schema:
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                required:
                  - nonce
        "403":
          description: "The client sent either a nonexisting username or an invalid password/mfa code. The client may retry."
          content:
            application/json:
              schema:
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                  content:
                    $ref: "#/components/schemas/CaptchaPrompt"
                required:
                  - nonce
                  - content

        "409":
          description: "The frame type expected by the server did not match the one sent by the client. As this likely means that something has gone wrong on the clients side, the user should be asked to reload the page and restart authentication from the beginning. The server will not accept further requests for the current login sequence."
          content:
            application/json:
              schema:
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                required:
                  - nonce
  /register/is_username_available:
    post:
      tags:
        - Registration
      summary: "Check if a username is available"
      description: "If the username is not valid (too long/short etc) the server should ignore that and simply respond with 'not available'"
      operationId: register.is_username_available
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "Username"
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    username:
                      type: string
                      description: "An account name"
                      example: "Alaska"
                  required:
                    - username
              required:
                - nonce
                - content
      responses:
        "200": 
          description: "Response describing whether the username is available"
          content:
            application/json:
              schema:
                title: "IsUsernameAvailable"
                type: object
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                  content:
                    type: object
                    properties:
                      is-available:
                        type: boolean
                    required:
                      - is-available
                required:
                  - nonce
                  - content
  /register/start_registration:
    post:
      tags:
        - Registration
      summary: "Reserve an account name and link it with an email"
      description:
        "This is the first stage of registration, the user will need to verify their email and then set their passphrase/account details"
      operationId: register.start_registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "PrimaryAccountDetails"
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    username:
                      type: string
                      example: "Alaska"
                    email:
                      type: string
                      example: "user@example.com"
                  required:
                    - username
                    - email
              required:
                - nonce
                - content
      responses:
        "200":
          description:
            "The server sent a verification mail to the provided email address. The client must provide the security code from that email"
          content:
            application/json:
              schema:
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                required:
                  - nonce
        "403":
          description: "Username or email are not valid."
          content:
            application/json:
              schema:
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                required:
                  - nonce
  /register/resend_verification_mail:
    post:
      tags:
        - Registration
      summary: "Send another verification mail"
      operationId: register.resend_verification_mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "ResendVerificationMail"
              type: object
              properties:
                nonce:
                    $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    email:
                      type: string
                      example: "user@example.com"
                  required:
                    - email
              required:
                - nonce
                - content
      responses:
        "200":
          description:
            "Another mail was sent to the same address. The old verification code is no longer valid"
          content:
            application/json:
              schema:
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                required:
                  - nonce
        "403":
          description: "No new mail was sent. Username/email did not match any account currently being registered"
          content:
            application/json:
              schema:
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                required:
                  - nonce
  /register/change_verification_email:
    post:
      tags:
        - Registration
      summary: "Change the email linked with an account that is currently being registered."
      description: "This exists in case the user mistyped their email. The user must be able to provide the email that was previously used as well as the username that should be registered. If the address was successfully changed, a new verification mail should be sent."
      operationId: register.change_verification_mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "ChangeVericationMailAddress"
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    old-email:
                      type: string
                      example: "old@example.com"
                    new-email:
                      type: string
                      example: "new@example.com"
                  required:
                    - old-email
                    - new-email
              required:
                - nonce
                - content
      responses:
        "200":
          description: "Account mail was changed and a new verification mail was sent"
          content:
            application/json:
              schema:
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                required:
                  - nonce
        "403":
          description: "Account email was not changed. Possible reasons include username/old email not matching or no account with the given username currently being registered"
          content:
            application/json:
              schema:
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                required:
                  - nonce
  /register/verify_email_address:
    post:
      tags:
        - Registration
      summary: "Verify a users account email"
      operationId: register.verify_email_address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "EmailVerificationToken"
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    verification-code:
                      type: string
                      description: "A secret code used to prove ownership of an email address"
                      example: "<verification code>"
                  required:
                    - verification-code
              required:
                - nonce
                - content
      responses:
        "200":
          description: "Email was successfully verified"
          content:
            application/json:
              schema:
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                  content:
                    type: object
                    properties:
                      captcha-required:
                        type: boolean
                required:
                  - nonce
        "403":
          description: "Invalid verification code"
          content:
            application/json:
              schema:
                title: "InvalidVerificationCode"
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                required:
                  - nonce
  /register/finish_registration:
    post:
      tags:
        - Registration
      summary: "Complete a users account"
      description: "Allows the user to set their password/secret question to complete their account setup"
      operationId: register.finish_registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "FinishRegistration"
              type: object
              properties:
                nonce:
                  $ref: "#/components/schemas/NonceToken"
                content:
                  type: object
                  properties:
                    h-captcha-response:
                      description: "A token proving the user has completed the hcaptcha challenge. Only required if the user was prompted to complete a captcha before"
                      type: string
                      example: "<challenge token>"
                    password:
                      type: string
                      description: "The account password"
                      example: "my-very-secure-password123"
                    secret-question:
                      type: string
                      description: "A question which the user can answer to recover the account in case they ever forget their password or lose their MFA device"
                      example: "What is the last name of the teacher who gave me my first failing grade?"
                    secret-answer:
                      type: string
                      description: "The answer to the secret question."
                      example: "Schmidt"
                  required:
                    - password
              required:
                - nonce
                - content
      responses:
        "201":
          description: "The account was successfully created. The user receives a authentication cookie and will be redirected to some landing page."
          content:
            application/json:
              schema:
                properties:
                  nonce:
                    $ref: "#/components/schemas/NonceToken"
                  content:
                    $ref: "#/components/schemas/SuccessfulAuthentication"
                required:
                  - nonce
                  - content
components:
  schemas:
    NonceToken:
      type: string
      example: "<token>"
      
    LinkedAccount:
      type: object
      properties:
        name:
          type: string
          example: "Alaska"
        href:
          type: string
          example: "https://github.com/Wuelle"
    
    PrivacySetting:
      type: object
      properties:
        hidden-from-discord:
          type: boolean
        hidden-from-profile:
          type: boolean
      required:
        - hidden-from-discord
        - hidden-from-profile
    LoginFrame:
      description: "A type of frame in the login sequence"
      type: string
      enum:
        - username
        - password
        - mfa
        - captcha
    CaptchaPrompt:
      description: "Tells the client whether or not the server expects it to complete a captcha with the next frame"
      type: object
      properties:
        show-captcha:
          description: "Whether or not the user must complete a captcha to continue authentication"
          type: boolean
      required:
        - show-captcha
    SuccessfulAuthentication:
      description: "Provides the client with an authentication cookie and a redirection url after completing login"
      type: object
      properties:
        redirect:
          description: "The client should visit this domain next"
          type: string
          example: "forums.hackthissite.org"
        token:
          description: "A cookie that will prove account ownership to HTS apps"
          type: string
          example: "HackThisSite=<token>;path=/;domain=hackthissite.org"
      required:
        - redirect
        - token
          
