openapi: 3.0.0
info:
  title: HackThisSite Single Sign-On API
  description: "This API should allow users to login, register and manage their HTS accounts. It also provides them with a login cookie that is used to authenticate them on various HTS apps"
  version: 0.0.1
servers:
  - url: /_api/
paths:
  /login/init_session:
    post:
      tags:
        - Login
      summary:
        Start logging in
      description: "Validates the users redirect url and, if it is valid, starts a login session on the server. If a username is provided, the client will not have to fill out the username frame while logging in (re-authentication)"
      operationId: login.init_session
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/InitLoginSession"
      responses:
        "200":
          description: "OK, the user may start the login process"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NextFrame"
          headers: 
            Set-Cookie:
              description: "An login session token that should be sent along with future requests."
              schema: 
                type: string
                example: LoginSession=<token>;
        "403":
          description: "The redirect-to parameter was not a valid hackthissite url or the given username does not exist."
  /login/submit_frame:
    post:
      tags:
        - Login
      summary: Submit one of multiple credential frames
      description: "This API allows the user to login to their hackthissite.org account. Authentication is done in three steps: Username, Password and MFA (if enabled). The order in which the user must enter these is unspecified (the client is told after submitting the previous value). After each step, the user may be required to complete a CAPTCHA."
      operationId: login.submit_frame
      parameters:
        - name: LoginSession
          in: cookie
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmittedFrame"
      responses:
        "200":
          description: "The server is ready to receive the next frame. Authentication is not yet complete."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NextFrame"
          
        "201":
          description: "The user was successfully authenticated and will be redirected to their destination"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessfulAuthentication"
              
        "401":
          description: "Invalid session or captcha token"
        "403":
          description: "The client sent either a nonexisting username or an invalid password/mfa code. The client may retry."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaptchaPrompt"

        "409":
          description: "The frame type expected by the server did not match the one sent by the client. As this likely means that something has gone wrong on the clients side, the user should be asked to reload the page and restart authentication from the beginning. The server will not accept further requests for the current login sequence."
  /register/is_username_available:
    post:
      tags:
        - Registration
      summary: "Check if a username is available"
      description: "If the username is not valid (too long/short etc) the server should ignore that simply and respond with 'not available'"
      operationId: register.is_username_available
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "Username"
              type: object
              properties:
                username:
                  type: string
                  description: "An account name"
                  example: "Alaska"
              required:
                - username
      responses:
        "200": 
          description: "Response describing whether the username is available"
          content:
            application/json:
              schema:
                title: "IsUsernameAvailable"
                type: object
                properties:
                  is-available:
                    type: boolean
                required:
                  - is-available
  /register/register_account:
    post:
      tags:
        - Registration
      summary: "Reserve an account name and link it with an email"
      description:
        "This is the first stage of registration, the user will need to verify their email and then set their passphrase/account details"
      operationId: register.register_account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "PrimaryAccountDetails"
              type: object
              properties:
                username:
                  type: string
                  example: "Alaska"
                email:
                  type: string
                  example: "user@example.com"
              required:
                - username
                - email
      responses:
        "200":
          description:
            "The server sent a verification mail to the provided email address. The client must provide the security code."
  /register/resend_verification_mail:
    post:
      tags:
        - Registration
      summary: "Send another verification mail"
      operationId: register.resend_verification_mail
      responses:
        "200":
          description:
            "Another mail was sent"
  /register/edit_verification_email:
    post:
      tags:
        - Registration
      summary: "Change the email linked with an account that is currently being registered."
      description: "This exists in case the user mistyped their email. The user must be able to provide the email that was previously used."
      operationId: register.change_verification_mail
      responses:
        "200":
          description: "Account mail was changed and a new verification mail was sent"
  /register/verify_email_address:
    post:
      tags:
        - Registration
      summary: "Verify a users account email"
      operationId: register.verify_email_address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "EmailVerificationToken"
              type: object
              properties:
                verification-code:
                  type: string
                  description: "A secret code used to prove ownership of an email address"
                  example: "<verification code>"
              required:
                - verification-code
      responses:
        "200":
          description: "Email was successfully verified"
        "403":
          description: "Invalid verification code"
  /register/finish_registration:
    post:
      tags:
        - Registration
      summary: "Complete a users account"
      description: "Allows the user to set their password/secret question to complete their account setup"
      operationId: register.finish_registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: "FinishRegistration"
              type: object
              properties:
                password:
                  type: string
                  description: "The account password"
                  example: "my-very-secure-password123"
                secret-question:
                  type: string
                  description: "A question which the user can answer to recover the account in case they ever forget their password or lose their MFA device"
                  example: "What was my first pets name?"
                secret-answer:
                  type: string
                  description: "The answer to the secret question."
                  example: "Broccoli"
              required:
                - password
      responses:
        "201":
          description: "The account was successfully created. The user receives a authentication cookie and will be redirected to some landing page."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessfulAuthentication"
      
components:
  schemas:
    InitLoginSession:
      description: "The initial payload sent by the client which starts a login session on the server"
      type: object
      properties:
        redirect:
          type: string
          description: "The AES-encrypted domain that the client will be redirected to after authentication completes. If this is not a valid url belonging to hackthissite.org, the server must not open a session."
        username:
          type: string
          description: "The account name that should be reauthenticated"
          example: "Alaska"
      required:
        - redirect
    SubmittedFrame:
      type: object
      required:
        - frame
        - value
      properties:
        frame:
          description: "The frame that was submitted by the user"
          type: string
          enum:
            - username
            - password
            - mfa
          example: password
        value:
          description: "The value submitted by the user"
          type: string
          example: "my-very-secure-password123"
        h-captcha-response:
          description: "A token proving the user has completed the hcaptcha challenge. Only required if the user was prompted to complete a captcha before"
          type: string
          example: "<challenge token>"
    NextFrame:
      description: "Information about the next login frame shown to the user"
      type: object
      properties:
        next:
          description: "The next frame that should be shown to the user"
          type: string
          enum:
            - username
            - password
            - mfa
        show-captcha:
          description: "Whether or not the user must complete a captcha to continue authentication"
          type: boolean
      required:
        - next
        - show-captcha
      example:
        next: password
        show-captcha: false
    CaptchaPrompt:
      description: "Tells the client whether or not the server expects it to complete a captcha with the next frame"
      type: object
      properties:
        show-captcha:
          description: "Whether or not the user must complete a captcha to continue authentication"
          type: boolean
      required:
        - show-captcha
    SuccessfulAuthentication:
      description: "Provides the client with an authentication cookie and a redirection url after completing login"
      type: object
      properties:
        redirect:
          description: "The client should visit this domain next"
          type: string
          example: "forums.hackthissite.org"
        token:
          description: "A cookie that will prove account ownership to HTS apps"
          type: string
          example: "HackThisSite=<token>;path=/;domain=hackthissite.org"
      required:
        - redirect
        - token
          
